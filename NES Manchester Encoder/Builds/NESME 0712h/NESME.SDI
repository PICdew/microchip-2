,,,;==================================================================================================
,,,;====================================  NES Joystic Decoder 1.0 ====================================
,,,;================================== DERKACH OLEXANDR DEVELOPMENT ==================================
,,,;========================================= (c) 2012 Alche =========================================
,,,;=========================================  alche@ukr.net =========================================
,,,;==================================================================================================
,,,;05.07.12 Добавлена перекодировка в формат DIY-RC
,,,;06.07.12 Добавлен маячек для визуального контроля
,,, #include       <P12F675.inc>                           ;файл стандартных определений
,,,        list       p=12F675
00002007,3FC4,,__CONFIG _INTRC_OSC_NOCLKOUT & _WDT_OFF & _PWRTE_ON & _MCLRE_OFF & _CP_OFF & _CPD_OFF
,,,
,,,;==================================================================================================
,,,;==================================== Раздел описания констант ====================================
,,,;==================================================================================================
,,,        #DEFINE INPUT           GPIO,2                  ;Ввод даных
,,,        #DEFINE CLK                     GPIO,0                  ;Вывод синхроимпульса
,,,        #DEFINE LATCH           GPIO,1                  ;Вывод записи в регистр
,,,        #DEFINE OUT                     GPIO,5                  ;Вывод результата
,,,        #DEFINE LED                     GPIO,4                  ;Вывод подключения светодиода
,,,        #DEFINE MODE_INV                                        ;Результат (1ый бит слева = MODE_NORM, с
,,,        CBLOCK  0x020
,,,
,,,
,,,        tmp
,,,        cnt                                                                     ;Ячейка счета
,,,        cnt1                                                            ;Ячейка счета в манчестеровских
,,,        cnt2                                                            ;Ячейка счета в манчестеровских
,,,        cnt3                                                            ;Ячейка счета для перекодировки
,,,        sum                                                                     ;Ячайка для счета CRC в
,,,        bt                                                                      ;Ячейка временного буфер
,,,        mtx_delay                                                       ;Ячейка длительности передаваемо
,,,        ncnt                                                            ;Ячейка счета в манчестере
,,,        temp                                                            ;Временная ячейка 1
,,,        temp1                                                           ;Временная ячейка 2
,,,        tcnt                                                            ;Ячейка счета в манчестере
,,,        rezult                                                          ;Ячейка промежуточного результат
,,,        mtx_buffer                                                      ;Ячейка для передачи передается
,,,
,,,        ENDC
,,,
,,,    packet_len  EQU 2
,,,
,,,
,,,SHORTPAUSE macro
,,,        movlw   0xFF
,,,        movwf   temp
,,,        decfsz  temp
,,,        goto    $-1
,,, endm
,,,
,,,
00000000,,org,org 0x000
00000000,2801,,        goto    START
,,,;==================================================================================================
,,,;==================================== Начальная  инициализация ====================================
,,,;==================================================================================================
00000001,,START,START
00000001,018B,,        clrf    INTCON                                          ;Очистка регистра прерываний
00000002,1683,,        bsf             STATUS,RP0                              ;Банк 1
,,,;       call    0x3FF                                           ;Считаем калибровочную константу
,,,;       movwf   OSCCAL                                          ;Поместим в регистр
00000003,3000,,        movlw   b'00000000'                                     ;Значение для регистра OPTION
00000004,0081,,        movwf   OPTION_REG                                      ;Поместили значение в регистр OPTION
00000005,1283,,        bcf             STATUS,RP0                                      ;Вернулись в Банк 0
00000006,0185,,        clrf    GPIO                                            ;Очистили порт
00000007,3007,,        movlw   b'00000111'                                     ;Значение для конфигурации компаратора (
00000008,0099,,        movwf   CMCON                                           ;Поместили в регистр конфигурации компар
,,,
00000009,1683,,        bsf             STATUS,RP0                                      ;Переходим в банк 1
0000000A,3010,,        movlw   b'00010000'                                     ;Слово конфигурации для ANSEL, FOsc/2 GP
,,,0 аналоговый вход
0000000B,009F,,        movwf   ANSEL                                           ;Поместили слово в регистр
0000000C,3004,,        movlw   b'00000100'                                     ;GP4 вход, остальные выходы
0000000D,0085,,        movwf   TRISIO                                          ;Поместили в регистр конфигурации входов
0000000E,3012,,        movlw   b'00010010'                                     ;Слово конфигурации для WPU
0000000F,0095,,        movwf   WPU                                                     ;Включили подтягивающие резистор
,,,
00000010,1283,,        bcf             STATUS,RP0                                      ;Вернулись в банк 0
00000011,3081,,        movlw   b'10000001'                                     ;Слово конфигурации для ADCON
00000012,009F,,        movwf   ADCON0                                          ;Поместили слово в регистр
00000013,,STARTWORK,STARTWORK
00000013,3003,,        movlw   0x03
00000014,00A1,,        movwf   cnt
00000015,,LEDBLINK,LEDBLINK
00000015,1605,,        bsf             LED
00000016,20AD,,        call    PAUSE
00000017,20AD,,        call    PAUSE
00000018,1205,,        bcf             LED
00000019,20AD,,        call    PAUSE
0000001A,20AD,,        call    PAUSE
0000001B,0BA1,,        decfsz  cnt
0000001C,2815,,        goto    LEDBLINK
0000001D,20B9,,        call    TESTSEND2
,,,
0000001E,,INIT,INIT
0000001E,01A0,,        clrf    tmp
0000001F,1285,,        bcf             OUT
00000020,01AC,,        clrf    rezult                                          ;Очистили ячейку результата
00000021,1003,,        bcf             STATUS,C                                        ;Сбросили флаг переноса после пр
00000022,1405,,        bsf             CLK                                                     ;Установили 1 на выводе
00000023,1485,,        bsf             LATCH                                           ;Дали команду регистру считать с
00000024,1085,,        bcf             LATCH                                           ;Установили 0 на выводе PS
,,,
00000025,,OPROS,OPROS
00000025,3008,,        movlw   0x08                                            ;Количество проходов для считывания выхо
00000026,00A1,,        movwf   cnt                                                     ;Поместили во временную ячейку с
00000027,,TAKTLOOP,TAKTLOOP
00000027,202E,,        call    TAKT                                            ;Будем тактировать вывод и считать резул
00000028,0BA1,,        decfsz  cnt                                                     ;Декримент ячейки счети
00000029,2827,,        goto    TAKTLOOP                                        ;Если не 0 то на начало цикла
0000002A,0AAC,,        incf    rezult                                          ;Иначе инкриментируем результат
0000002B,0BAC,,        decfsz  rezult                                          ;Теперь декриментируем
0000002C,2839,,        goto    OUTREZULT                                       ;Если резуьтат не ноль то будем его выво
0000002D,281E,,        goto    INIT                                            ;Иначе будем опрашивать снова
,,,
0000002E,,TAKT,TAKT
,,,#ifdef MODE_INV                                                 ;Если указан режим INV
0000002E,0DAC,,        rlf             rezult                                          ;То будем сдвигать результат вле
,,,endif                                                                   ;Конец если
,,,
,,,#ifdef MODE_NORM                                                ;Если указан режим NORM
,,,        rrf             rezult                                          ;то будем сдвигать результат впр
,,,endif                                                                   ;конец если
,,,
0000002F,1003,,        bcf             STATUS,C                                        ;Очистили флаг переноса
00000030,1405,,        bsf             CLK                                                     ;Установим 1 на выводе с
,,,        SHORTPAUSE                                                      ;Небольшая пауза, даем время уст
00000031,30FF,,        - movlw   0xFF
00000032,00A9,,        - movwf   temp
00000033,0BA9,,        - decfsz  temp
00000034,2833,,        - goto    $-1
00000035,1D05,,        btfss   INPUT                                           ;Проверим состояние входа если пришел 0
,,,
,,,#ifdef MODE_INV                                                 ;Если указан режим INV
00000036,142C,,        bsf             rezult,0                                        ;то установим нулевой бит регист
,,,endif                                                                   ;конец если
,,,
,,,#ifdef MODE_NORM                                                ;Если указан режим NORM
,,,        bsf             rezult,7                                        ;то установим седьмой бит регист
,,,endif                                                                   ;конец если
,,,
00000037,1005,,        bcf             CLK                                                     ;Установим 0 на выводе с
00000038,0008,, return                                                                 ;и возвращаемся
,,,
00000039,,OUTREZULT,OUTREZULT
00000039,082C,,        movfw   rezult                                          ;Поместили в рабочий регистр результат
0000003A,00A1,,        movwf   cnt                                                     ;Рабочий регистр во временную яч
0000003B,,OUTLOOP,OUTLOOP
0000003B,1285,,        bcf             OUT                                                     ;Установим 0 на выходе
0000003C,1685,,        bsf             OUT                                                     ;установим 1 на выходе
0000003D,0BA1,,        decfsz  cnt                                                     ;Уменьшим счетчик на 1, если сче
0000003E,283B,,        goto    OUTLOOP                                         ;то на начало цикла
,,,;       call    ENCODE                                          ;Вызовем кодер посылки (для DIY-RC Proje
0000003F,082C,,        movfw   rezult                                          ;Поместили результ в w
00000040,00AE,,        movwf   mtx_buffer+1                            ;Перенесли w в буферотправки+1
00000041,082E,,        movf    (mtx_buffer+1),W
00000042,393F,,        andlw   0x3F
00000043,042B,,        iorwf   tcnt,W
00000044,00AE,,        movwf   (mtx_buffer+1)
00000045,3003,,        movlw   3                                                       ;Количество повторных отправок
00000046,00A9,,        movwf   temp                                            ;в ячейку счета
00000047,2050,,        call    MANCHESTER                                      ;Выводим код
00000048,0BA9,,        decfsz  temp                                            ;Уменьшим и если не 0
00000049,2847,,        goto    $-2                                                     ;то зациклимся
0000004A,082C,,        movfw   rezult
0000004B,3040,,        movlw   0x40
0000004C,07AB,,        addwf   tcnt,F
,,,
0000004D,082C,,        movfw   rezult
0000004E,00A1,,        movwf   cnt
,,,;LEDBLINK2
,,,;       call    PAUSE
,,,;       call    PAUSE
,,,;       bsf             LED
,,,;       call    PAUSE
,,,;       call    PAUSE
,,,;       bcf             LED
,,,
,,,;       decfsz  cnt
,,,;       goto    LEDBLINK2
0000004F,281E,,        goto    INIT                                            ;иначе возвращаемся в самое начало
,,,
,,,
,,,;==================================================================================================
,,,;========================================= MANCHESTER =============================================
,,,;==================================================================================================
00000050,,MANCHESTER,MANCHESTER
00000050,01A0,,        clrf    tmp
00000051,,mtx_init,mtx_init
00000051,3075,,        movlw   0x75                                            ;Значение длительности импульсов
00000052,00A7,,        movwf   mtx_delay                                       ;Поместили в регистр
,,,
00000053,,HEADER,HEADER                                                                  ;Посылка заголовка
00000053,3014,,        movlw   0x14                                            ;Количество единиц в заголовке
00000054,00A3,,        movwf   cnt2                                            ;Ячейка для счета
00000055,,head0,head0                                                                   ;Начинаем посылку
00000055,2081,,        call    BIT1                                            ;Отправим 1
00000056,0BA3,,        decfsz  cnt2,F                                          ;уменшим счетчик и если не ноль
00000057,2855,,        goto    head0                                           ;перейдем на начало цикла
00000058,2075,,        call    BIT0                                            ;иначе отправим 0
00000059,302D,,        movlw   mtx_buffer                                      ;
0000005A,0084,,        movwf   FSR
0000005B,3002,,        movlw   packet_len
0000005C,00A2,,        movwf   cnt1
0000005D,30FF,,        movlw   0xFF
0000005E,00A5,,        movwf   sum
0000005F,,outbu0,outbu0
0000005F,0800,,        movf    INDF,W                                          ;w=FF,75,FF,75
00000060,208D,,        call    UPDATE_SUM                                      ;w=0,41,0,41,0,41 (содержимое ячеек)
00000061,0800,,        movf    INDF,W                                          ;w=AC,8D,AC,
00000062,2069,,        call    OUTBYTE                                         ;w=0,41,0,41,0,41
00000063,0A84,,        incf    FSR,F
00000064,0BA2,,        decfsz  cnt1,F
00000065,285F,,        goto    outbu0
00000066,0825,,        movf    sum,W
00000067,2069,,        call    OUTBYTE
00000068,0008,, return
,,,
00000069,,OUTBYTE,OUTBYTE
00000069,00A6,,        movwf   bt
0000006A,3008,,        movlw   0x08
0000006B,00A3,,        movwf   cnt2
0000006C,,outby0,outby0
0000006C,0DA6,,        rlf     bt,F
0000006D,1803,,        btfsc   STATUS,C
0000006E,2871,,        goto    outby1
0000006F,2075,,        call    BIT0
00000070,2872,,        goto    outby2
00000071,,outby1,outby1
00000071,2081,,        call    BIT1
00000072,,outby2,outby2
00000072,0BA3,,        decfsz  cnt2,F
00000073,286C,,        goto    outby0
00000074,2081,,        call    BIT1
,,,
00000075,,BIT0,BIT0
00000075,0AA0,,        incf    tmp
00000076,1685,,        bsf             OUT
00000077,,ndelaya0,ndelaya0
00000077,0827,,        movf    mtx_delay,W
00000078,00A8,,        movwf   ncnt
00000079,,ndelaya1,ndelaya1
00000079,0BA8,,        decfsz  ncnt,F
0000007A,2879,,        goto    ndelaya1
0000007B,1285,,        bcf             OUT
0000007C,,ndelayb0,ndelayb0
0000007C,0827,,        movf    mtx_delay,W
0000007D,00A8,,        movwf   ncnt
0000007E,,ndelayb1,ndelayb1
0000007E,0BA8,,        decfsz  ncnt,F
0000007F,287E,,        goto    ndelayb1
00000080,0008,, return
,,,
00000081,,BIT1,BIT1
00000081,0AA0,,        incf    tmp
00000082,1285,,        bcf             OUT
00000083,,ndelayc0,ndelayc0
00000083,0827,,        movf    mtx_delay,W
00000084,00A8,,        movwf   ncnt
00000085,,ndelayc1,ndelayc1
00000085,0BA8,,        decfsz  ncnt,F
00000086,2885,,        goto    ndelayc1
00000087,1685,,        bsf             OUT
00000088,,ndelaye0,ndelaye0
00000088,0827,,        movf    mtx_delay,W
00000089,00A8,,        movwf   ncnt
0000008A,,ndelaye1,ndelaye1
0000008A,0BA8,,        decfsz  ncnt,F
0000008B,288A,,        goto    ndelaye1
0000008C,0008,, return
,,,
0000008D,,UPDATE_SUM,UPDATE_SUM
0000008D,06A5,,        xorwf   sum,F
0000008E,0103,,        clrw
0000008F,1BA5,,        btfsc   sum,7
00000090,3A7A,,        xorlw   0x7A
00000091,1B25,,        btfsc   sum,6
00000092,3A3D,,        xorlw   0x3D
00000093,1AA5,,        btfsc   sum,5
00000094,3A86,,        xorlw   0x86
00000095,1A25,,        btfsc   sum,4
00000096,3A43,,        xorlw   0x43
00000097,19A5,,        btfsc   sum,3
00000098,3AB9,,        xorlw   0xB9
00000099,1925,,        btfsc   sum,2
0000009A,3AC4,,        xorlw   0xC4
0000009B,18A5,,        btfsc   sum,1
0000009C,3A62,,        xorlw   0x62
0000009D,1825,,        btfsc   sum,0
0000009E,3A31,,        xorlw   0x31
0000009F,00A5,,        movwf   sum
000000A0,0008,, return
,,,
000000A1,,ENCODE,ENCODE                                                                                  ;Кодировка под D
000000A1,3008,,        movlw   0x08                                                            ;Счетчик циклов
000000A2,00A1,,        movwf   cnt                                                                     ;Ячейка счета
000000A3,0103,,        clrw                                                                            ;Очистили рабочи
000000A4,01A4,,        clrf    cnt3                                                            ;Ячейка счета кнопок
000000A5,,SUM,SUM
000000A5,0AA4,,        incf    cnt3                                                            ;Инкремент счетчика
000000A6,182C,,        btfsc   rezult,0                                                        ;Если нулевой бит равен
,,,1
000000A7,0724,,        addwf   cnt3,0                                                          ;тогда суммируем значени
000000A8,0CAC,,        rrf             rezult                                                          ;Сдвигаем вправо
000000A9,0BA1,,        decfsz  cnt                                                                     ;Декримент счетч
000000AA,28A5,,        goto    SUM                                                                     ;Если не 0 то за
000000AB,00AC,,        movwf   rezult                                                          ;Иначе поместим значение
000000AC,0008,, return                                                                                 ;Возвращаемся
,,,
000000AD,,PAUSE,PAUSE
000000AD,30FF,,        movlw   0xFF
000000AE,00AA,,        movwf   temp1
000000AF,00A9,,        movwf   temp
000000B0,0BA9,,        decfsz  temp
000000B1,28B0,,        goto    $-1
000000B2,0BAA,,        decfsz  temp1
000000B3,28AF,,        goto $-4
000000B4,0008,return,return
,,,
000000B5,,TESTSEND,TESTSEND
000000B5,3041,,        movlw   0x41
000000B6,00AE,,        movwf   mtx_buffer+1
,,,
000000B7,,T1,T1
000000B7,2050,,        call    MANCHESTER
,,,;       movlw   0x40
,,,;       addwf   mtx_buffer
,,,;       goto    T1
000000B8,28B5,,        goto    TESTSEND
,,,
,,,
000000B9,,TESTSEND2,TESTSEND2
000000B9,3075,,                                movlw   0x75
000000BA,00A7,,                        movwf   mtx_delay
000000BB,3005,,                                movlw   0x05
000000BC,00A1,,                                movwf   cnt
000000BD,,TS1,TS1
000000BD,2081,,                                call    BIT1;1
000000BE,2081,,                                call    BIT1;2
000000BF,2081,,                                call    BIT1;3
000000C0,2081,,                                call    BIT1;4
000000C1,2081,,                                call    BIT1;5
000000C2,2081,,                                call    BIT1;6
000000C3,2081,,                                call    BIT1;7
000000C4,2081,,                                call    BIT1;8
000000C5,2081,,                                call    BIT1;9
000000C6,2081,,                                call    BIT1;10
000000C7,2081,,                                call    BIT1;11
000000C8,2081,,                                call    BIT1;12
000000C9,2081,,                                call    BIT1;13
000000CA,2081,,                                call    BIT1;14
000000CB,2081,,                                call    BIT1;15
000000CC,2081,,                                call    BIT1;16
000000CD,2081,,                                call    BIT1;17
000000CE,2081,,                                call    BIT1;18
000000CF,2081,,                                call    BIT1;19
000000D0,2081,,                                call    BIT1;20
000000D1,2075,,                                call    BIT0;21
,,,;outbu0
,,,;outbyteprohod1
000000D2,,byte1,byte1
000000D2,2075,,                                call    BIT0;22
000000D3,2075,,                                call    BIT0;23
000000D4,2075,,                                call    BIT0;24
000000D5,2075,,                                call    BIT0;25
000000D6,2075,,                                call    BIT0;26
000000D7,2075,,                                call    BIT0;27
000000D8,2075,,                                call    BIT0;28
000000D9,2075,,                                call    BIT0;29
,,,
000000DA,2081,,                                call    BIT1;30
000000DB,2075,,                                call    BIT0;31
,,,;outbyteprohod2
000000DC,,byte2,byte2
000000DC,2075,,                                call    BIT0;32
000000DD,2081,,                                call    BIT1;33
000000DE,2075,,                                call    BIT0;34
000000DF,2075,,                                call    BIT0;35
000000E0,2075,,                                call    BIT0;36
000000E1,2075,,                                call    BIT0;37
000000E2,2075,,                                call    BIT0;38
000000E3,2081,,                                call    BIT1;39
,,,
000000E4,2081,,                                call    BIT1;40
000000E5,2075,,                                call    BIT0;41
,,,;outbytebeforereturn
000000E6,,byte3,byte3
000000E6,2081,,                                call    BIT1;42
000000E7,2075,,                                call    BIT0;43
000000E8,2075,,                                call    BIT0;44
000000E9,2075,,                                call    BIT0;45
000000EA,2081,,                                call    BIT1;46
000000EB,2081,,                                call    BIT1;47
000000EC,2075,,                                call    BIT0;48
000000ED,2081,,                                call    BIT1;49
,,,
000000EE,2081,,                                call    BIT1;50
000000EF,2075,,                                call    BIT0;51
,,,
000000F0,0BA1,,                                decfsz  cnt
000000F1,28BD,,                                goto    TS1
,,,
000000F2,3005,,                                movlw   0x05
000000F3,00A1,,                                movwf   cnt
000000F4,,TS2,TS2
000000F4,2081,,                                call    BIT1;1
000000F5,2081,,                                call    BIT1;2
000000F6,2081,,                                call    BIT1;3
000000F7,2081,,                                call    BIT1;4
000000F8,2081,,                                call    BIT1;5
000000F9,2081,,                                call    BIT1;6
000000FA,2081,,                                call    BIT1;7
000000FB,2081,,                                call    BIT1;8
000000FC,2081,,                                call    BIT1;9
000000FD,2081,,                                call    BIT1;10
000000FE,2081,,                                call    BIT1;11
000000FF,2081,,                                call    BIT1;12
00000100,2081,,                                call    BIT1;13
00000101,2081,,                                call    BIT1;14
00000102,2081,,                                call    BIT1;15
00000103,2081,,                                call    BIT1;16
00000104,2081,,                                call    BIT1;17
00000105,2081,,                                call    BIT1;18
00000106,2081,,                                call    BIT1;19
00000107,2081,,                                call    BIT1;20
00000108,2075,,                                call    BIT0;21
00000109,,byte2_1,byte2_1
00000109,2075,,                                call    BIT0;22
0000010A,2075,,                                call    BIT0;23
0000010B,2075,,                                call    BIT0;24
0000010C,2075,,                                call    BIT0;25
0000010D,2075,,                                call    BIT0;26
0000010E,2075,,                                call    BIT0;27
0000010F,2075,,                                call    BIT0;28
00000110,2075,,                                call    BIT0;29
,,,
00000111,2081,,                                call    BIT1;30
00000112,2075,,                                call    BIT0;31
00000113,,byte2_2,byte2_2
00000113,2081,,                                call    BIT1;32
00000114,2075,,                                call    BIT0;33
00000115,2075,,                                call    BIT0;34
00000116,2075,,                                call    BIT0;35
00000117,2075,,                                call    BIT0;36
00000118,2075,,                                call    BIT0;37
00000119,2075,,                                call    BIT0;38
0000011A,2081,,                                call    BIT1;39
,,,
0000011B,2081,,                                call    BIT1;40
0000011C,2075,,                                call    BIT0;41
0000011D,,byte2_3,byte2_3
0000011D,2081,,                                call    BIT1;42
0000011E,2081,,                                call    BIT1;43
0000011F,2075,,                                call    BIT0;44
00000120,2075,,                                call    BIT0;45
00000121,2081,,                                call    BIT1;46
00000122,2075,,                                call    BIT0;47
00000123,2081,,                                call    BIT1;48
00000124,2075,,                                call    BIT0;49
,,,
00000125,2081,,                                call    BIT1;50
00000126,2075,,                                call    BIT0;51
,,,
00000127,0BA1,,                                decfsz  cnt
00000128,28F4,,                                goto TS2
,,,
00000129,3005,,                                movlw   0x05
0000012A,00A1,,                                movwf   cnt
0000012B,,TS3,TS3
0000012B,2081,,                                call    BIT1;1
0000012C,2081,,                                call    BIT1;2
0000012D,2081,,                                call    BIT1;3
0000012E,2081,,                                call    BIT1;4
0000012F,2081,,                                call    BIT1;5
00000130,2081,,                                call    BIT1;6
00000131,2081,,                                call    BIT1;7
00000132,2081,,                                call    BIT1;8
00000133,2081,,                                call    BIT1;9
00000134,2081,,                                call    BIT1;10
00000135,2081,,                                call    BIT1;11
00000136,2081,,                                call    BIT1;12
00000137,2081,,                                call    BIT1;13
00000138,2081,,                                call    BIT1;14
00000139,2081,,                                call    BIT1;15
0000013A,2081,,                                call    BIT1;16
0000013B,2081,,                                call    BIT1;17
0000013C,2081,,                                call    BIT1;18
0000013D,2081,,                                call    BIT1;19
0000013E,2081,,                                call    BIT1;20
0000013F,2075,,                                call    BIT0;21
00000140,,byte3_1,byte3_1
00000140,2075,,                                call    BIT0;22
00000141,2075,,                                call    BIT0;23
00000142,2075,,                                call    BIT0;24
00000143,2075,,                                call    BIT0;25
00000144,2075,,                                call    BIT0;26
00000145,2075,,                                call    BIT0;27
00000146,2075,,                                call    BIT0;28
00000147,2075,,                                call    BIT0;29
,,,
00000148,2081,,                                call    BIT1;30
00000149,2075,,                                call    BIT0;31
0000014A,,byte3_2,byte3_2
0000014A,2081,,                                call    BIT1;32
0000014B,2081,,                                call    BIT1;33
0000014C,2075,,                                call    BIT0;34
0000014D,2075,,                                call    BIT0;35
0000014E,2075,,                                call    BIT0;36
0000014F,2075,,                                call    BIT0;37
00000150,2075,,                                call    BIT0;38
00000151,2081,,                                call    BIT1;39
,,,
00000152,2081,,                                call    BIT1;40
00000153,2075,,                                call    BIT0;41
00000154,,byte3_3,byte3_3
00000154,2081,,                                call    BIT1;42
00000155,2081,,                                call    BIT1;43
00000156,2081,,                                call    BIT1;44
00000157,2081,,                                call    BIT1;45
00000158,2075,,                                call    BIT0;46
00000159,2081,,                                call    BIT1;47
0000015A,2081,,                                call    BIT1;48
0000015B,2081,,                                call    BIT1;49
,,,
0000015C,2081,,                                call    BIT1;50
0000015D,2075,,                                call    BIT0;51
0000015E,0BA1,,                                decfsz  cnt
0000015F,292B,,                                goto    TS3
,,,
,,,
00000160,3005,,                                movlw   0x05
00000161,00A1,,                                movwf   cnt
00000162,,TS4,TS4
00000162,2081,,                                call    BIT1;1
00000163,2081,,                                call    BIT1;2
00000164,2081,,                                call    BIT1;3
00000165,2081,,                                call    BIT1;4
00000166,2081,,                                call    BIT1;5
00000167,2081,,                                call    BIT1;6
00000168,2081,,                                call    BIT1;7
00000169,2081,,                                call    BIT1;8
0000016A,2081,,                                call    BIT1;9
0000016B,2081,,                                call    BIT1;10
0000016C,2081,,                                call    BIT1;11
0000016D,2081,,                                call    BIT1;12
0000016E,2081,,                                call    BIT1;13
0000016F,2081,,                                call    BIT1;14
00000170,2081,,                                call    BIT1;15
00000171,2081,,                                call    BIT1;16
00000172,2081,,                                call    BIT1;17
00000173,2081,,                                call    BIT1;18
00000174,2081,,                                call    BIT1;19
00000175,2081,,                                call    BIT1;20
00000176,2075,,                                call    BIT0;21
00000177,,byte4_1,byte4_1
00000177,2075,,                                call    BIT0;22
00000178,2075,,                                call    BIT0;23
00000179,2075,,                                call    BIT0;24
0000017A,2075,,                                call    BIT0;25
0000017B,2075,,                                call    BIT0;26
0000017C,2075,,                                call    BIT0;27
0000017D,2075,,                                call    BIT0;28
0000017E,2075,,                                call    BIT0;29
,,,
0000017F,2081,,                                call    BIT1;30
00000180,2075,,                                call    BIT0;31
00000181,,byte4_2,byte4_2
00000181,2075,,                                call    BIT0;32
00000182,2075,,                                call    BIT0;33
00000183,2075,,                                call    BIT0;34
00000184,2075,,                                call    BIT0;35
00000185,2075,,                                call    BIT0;36
00000186,2075,,                                call    BIT0;37
00000187,2075,,                                call    BIT0;38
00000188,2081,,                                call    BIT1;39
,,,
00000189,2081,,                                call    BIT1;40
0000018A,2075,,                                call    BIT0;41
0000018B,,byte4_3,byte4_3
0000018B,2081,,                                call    BIT1;42
0000018C,2075,,                                call    BIT0;43
0000018D,2081,,                                call    BIT1;44
0000018E,2081,,                                call    BIT1;45
0000018F,2075,,                                call    BIT0;46
00000190,2075,,                                call    BIT0;47
00000191,2075,,                                call    BIT0;48
00000192,2075,,                                call    BIT0;49
,,,
00000193,2081,,                                call    BIT1;50
00000194,2075,,                                call    BIT0;51
00000195,0BA1,,                                decfsz  cnt
00000196,2962,,                                goto    TS4
,,,
,,,
00000197,28B9,,        goto TESTSEND2
,,,
,,,;org 0x3FF
,,,;retlw 0x3424
,,, end
